name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          pdm install || (pdm lock --update-reuse && pdm install)

      - name: Run security checks
        run: |
          make security || true
          # Generate JSON report for artifacts
          pdm run bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: bandit-report.json

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          pdm install --prod || (pdm lock --update-reuse && pdm install --prod)

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          # Use existing Dockerfile if available, otherwise create a simple one
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile.scan << 'EOF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY . .
          RUN pip install .
          CMD ["milvus-fake-data", "--help"]
          EOF
            docker build -f Dockerfile.scan -t milvus-fake-data:scan .
          else
            docker build -t milvus-fake-data:scan .
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'milvus-fake-data:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'